def replace_characters(first_list, second_list, replacement_char):      #첫 번째 리스트에 두 번째 리스트의 요소가 포함되어 있다면 다른 문자로 대체해주는 함수 코드
    result = []
    for string in first_list:
        for char in second_list:
            string = string.replace(char, replacement_char)
        result.append(string)
    return result


PLusV =  ['ㅏ', 'ㅑ', 'ㅗ', 'ㅛ', 'ㅐ', 'ㅒ', 'ㅖ',  'ㆍ', 'ᆡ', 'ᆢ', 'ퟅ', 'ᅶ', 'ᅸ', 'ᅹ', 'ᆄ', 'ᆅ', 'ㆉ', 'ힲ', 'ힳ', 'ힹ', 'ᆘ', 'ᆙ', 'ᆚ', 'ퟂ', 'ힾ', 'ퟀ', 'ퟂ']         # 양성모음 배열
MinusV =  ['ㅓ', 'ㅕ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅔ', 'ㅖ', 'ᅻ', 'ᅼ', 'ᅾ', 'ᆏ', 'ᆐ', 'ᆑ', 'ᆒ', 'ힵ', 'ᅟᆏ', 'ᆑ', 'ힺ', 'ힻ', 'ᆛ', 'ퟃ', 'ᆜ']        # 음성모음 배열
MIddle = ['ㅣ']
PMM = []                                   # 양성 or 음성 or 중성 모음 판별을 위한 빈 리스트 선언
Text = []


R_Text = input()                             # 초기 텍스트 인풋
R_Text = R_Text.replace("맨위로", "")

R_Text = str(OLD_TEXTS(R_Text))                # 옛한글 처리

R_Text = re.sub(r'\([^)]*\)', '', R_Text)    # 결과값 불러올 텍스트 저장(괄호 안 글자 삭제)
R_Text = re.sub(r'\[[^)]*\]', '', R_Text)    # 결과값 불러올 텍스트 저장(괄호 안 글자 삭제)
R_Text = re.sub(r'\-[^)]*\-', '', R_Text)    # 결과값 불러올 텍스트 저장(괄호 안 글자 삭제)
R_Text = R_Text.split()                    # 띄어쓰기 단위로 텍스트 나누어 배열형태로 저장
R_Text = [item for item in R_Text if not ('제' in item and '장' in item) and not any(char.isdigit() for char in item)]


print(R_Text)

for x in R_Text:
  Text.append(j2hcj(h2j(x)))

print(Text)



PMM = replace_characters(Text, PLusV, '1')
PMM = replace_characters(PMM, MinusV, '0')
PMM = replace_characters(PMM, MIddle, '3')
PMM = ["".join(char for char in string if char in ['0', '1', '3']) for string in PMM]     # 양성모음은 1, 음성모음은 0, 중성모음은 3으로 변환시키고, 그 숫자들만 남김
print(PMM)

index_N = 0                               # 인덱스 표시용 변수 선언
NotRule = []                              # 모음조화 적용이 잘못된 단어의 리스트 선언
OkRule = []                               # 모조조화 적용이 잘 된 단어의 리스트 선언


for string in PMM:
  if '01' in string or '10' in string:
    NotRule.append(R_Text[index_N])
  elif len(string) > 1:
    OkRule.append(R_Text[index_N])

  index_N = index_N + 1



print('모음조화가 지켜진 단어의 개수:', len(OkRule))
print('모음조화가 지켜지지 않은 단어의 개수:', len(NotRule))
print('모음조화가 지켜진 단어:', OkRule)
print('모음조화가 지켜지지 않은 단어:', NotRule)
print('모음조화가 지켜지지 않은 비율:', round(len(NotRule) / len(OkRule) * 100, 3), '%')





